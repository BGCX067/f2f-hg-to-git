-- ****************************************
-- DO NOT EDIT
-- This file was automatically generated by the Impulse C Compiler.
-- 
-- Impulse C is Copyright 2002-2009, Impulse Accelerated Technologies, Inc.
-- 
-- Stage Master is Copyright 2002-2009, Green Mountain Computing Systems, Inc.
-- 
-- All rights reserved.
-- 
-- ****************************************


-- TARGET: VHDL
  
library ieee;
use ieee.std_logic_1164.all;

package external_components is
end package;
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity fpga_firstx_RAM is
  port (
    rst,clk : in std_ulogic;
    we : in std_ulogic;
    addr : in std_ulogic_vector(3 downto 0);
    addr2 : in std_ulogic_vector(3 downto 0);
    din : in std_ulogic_vector(31 downto 0);
    dout : out std_ulogic_vector(31 downto 0);
    dout2 : out std_ulogic_vector(31 downto 0)
  );
end fpga_firstx_RAM;

architecture dualsync of fpga_firstx_RAM is
  type memtype is array (0 to 14) of
    std_ulogic_vector(31 downto 0);
  signal mem : memtype;
  signal raddr: unsigned(3 downto 0);
  signal raddr2: unsigned(3 downto 0);
begin
  writemem: process (clk)
  begin
    if (clk'event and clk='1') then
      if (we = '1') then
        mem(conv_integer(unsigned(addr))) <= din;
      end if;
      raddr <= unsigned(addr);
      raddr2 <= unsigned(addr2);
    end if;
  end process;

  dout <= mem(conv_integer(raddr));
  dout2 <= mem(conv_integer(raddr2));
end dualsync;

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity fpga_firsty_RAM is
  port (
    rst,clk : in std_ulogic;
    we : in std_ulogic;
    addr : in std_ulogic_vector(3 downto 0);
    addr2 : in std_ulogic_vector(3 downto 0);
    din : in std_ulogic_vector(31 downto 0);
    dout : out std_ulogic_vector(31 downto 0);
    dout2 : out std_ulogic_vector(31 downto 0)
  );
end fpga_firsty_RAM;

architecture dualsync of fpga_firsty_RAM is
  type memtype is array (0 to 14) of
    std_ulogic_vector(31 downto 0);
  signal mem : memtype;
  signal raddr: unsigned(3 downto 0);
  signal raddr2: unsigned(3 downto 0);
begin
  writemem: process (clk)
  begin
    if (clk'event and clk='1') then
      if (we = '1') then
        mem(conv_integer(unsigned(addr))) <= din;
      end if;
      raddr <= unsigned(addr);
      raddr2 <= unsigned(addr2);
    end if;
  end process;

  dout <= mem(conv_integer(raddr));
  dout2 <= mem(conv_integer(raddr2));
end dualsync;

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity fpga_firstz_RAM is
  port (
    rst,clk : in std_ulogic;
    we : in std_ulogic;
    addr : in std_ulogic_vector(3 downto 0);
    addr2 : in std_ulogic_vector(3 downto 0);
    din : in std_ulogic_vector(31 downto 0);
    dout : out std_ulogic_vector(31 downto 0);
    dout2 : out std_ulogic_vector(31 downto 0)
  );
end fpga_firstz_RAM;

architecture dualsync of fpga_firstz_RAM is
  type memtype is array (0 to 14) of
    std_ulogic_vector(31 downto 0);
  signal mem : memtype;
  signal raddr: unsigned(3 downto 0);
  signal raddr2: unsigned(3 downto 0);
begin
  writemem: process (clk)
  begin
    if (clk'event and clk='1') then
      if (we = '1') then
        mem(conv_integer(unsigned(addr))) <= din;
      end if;
      raddr <= unsigned(addr);
      raddr2 <= unsigned(addr2);
    end if;
  end process;

  dout <= mem(conv_integer(raddr));
  dout2 <= mem(conv_integer(raddr2));
end dualsync;

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity fpga_secondx_RAM is
  port (
    rst,clk : in std_ulogic;
    we : in std_ulogic;
    addr : in std_ulogic_vector(3 downto 0);
    addr2 : in std_ulogic_vector(3 downto 0);
    din : in std_ulogic_vector(31 downto 0);
    dout : out std_ulogic_vector(31 downto 0);
    dout2 : out std_ulogic_vector(31 downto 0)
  );
end fpga_secondx_RAM;

architecture dualsync of fpga_secondx_RAM is
  type memtype is array (0 to 14) of
    std_ulogic_vector(31 downto 0);
  signal mem : memtype;
  signal raddr: unsigned(3 downto 0);
  signal raddr2: unsigned(3 downto 0);
begin
  writemem: process (clk)
  begin
    if (clk'event and clk='1') then
      if (we = '1') then
        mem(conv_integer(unsigned(addr))) <= din;
      end if;
      raddr <= unsigned(addr);
      raddr2 <= unsigned(addr2);
    end if;
  end process;

  dout <= mem(conv_integer(raddr));
  dout2 <= mem(conv_integer(raddr2));
end dualsync;

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity fpga_secondy_RAM is
  port (
    rst,clk : in std_ulogic;
    we : in std_ulogic;
    addr : in std_ulogic_vector(3 downto 0);
    addr2 : in std_ulogic_vector(3 downto 0);
    din : in std_ulogic_vector(31 downto 0);
    dout : out std_ulogic_vector(31 downto 0);
    dout2 : out std_ulogic_vector(31 downto 0)
  );
end fpga_secondy_RAM;

architecture dualsync of fpga_secondy_RAM is
  type memtype is array (0 to 14) of
    std_ulogic_vector(31 downto 0);
  signal mem : memtype;
  signal raddr: unsigned(3 downto 0);
  signal raddr2: unsigned(3 downto 0);
begin
  writemem: process (clk)
  begin
    if (clk'event and clk='1') then
      if (we = '1') then
        mem(conv_integer(unsigned(addr))) <= din;
      end if;
      raddr <= unsigned(addr);
      raddr2 <= unsigned(addr2);
    end if;
  end process;

  dout <= mem(conv_integer(raddr));
  dout2 <= mem(conv_integer(raddr2));
end dualsync;

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity fpga_secondz_RAM is
  port (
    rst,clk : in std_ulogic;
    we : in std_ulogic;
    addr : in std_ulogic_vector(3 downto 0);
    addr2 : in std_ulogic_vector(3 downto 0);
    din : in std_ulogic_vector(31 downto 0);
    dout : out std_ulogic_vector(31 downto 0);
    dout2 : out std_ulogic_vector(31 downto 0)
  );
end fpga_secondz_RAM;

architecture dualsync of fpga_secondz_RAM is
  type memtype is array (0 to 14) of
    std_ulogic_vector(31 downto 0);
  signal mem : memtype;
  signal raddr: unsigned(3 downto 0);
  signal raddr2: unsigned(3 downto 0);
begin
  writemem: process (clk)
  begin
    if (clk'event and clk='1') then
      if (we = '1') then
        mem(conv_integer(unsigned(addr))) <= din;
      end if;
      raddr <= unsigned(addr);
      raddr2 <= unsigned(addr2);
    end if;
  end process;

  dout <= mem(conv_integer(raddr));
  dout2 <= mem(conv_integer(raddr2));
end dualsync;

library ieee;
use ieee.std_logic_1164.all;

library impulse;
use impulse.components.all;
  
entity fpga is
  port (signal reset : in std_ulogic;
    signal sclk : in std_ulogic;
    signal clk : in std_ulogic;
    signal p_input_rdy : in std_ulogic;
    signal p_input_en : inout std_ulogic;
    signal p_input_eos : in std_ulogic;
    signal p_input_data : in std_ulogic_vector (31 downto 0);
    signal p_output_rdy : in std_ulogic;
    signal p_output_en : inout std_ulogic;
    signal p_output_eos : out std_ulogic;
    signal p_output_data : out std_ulogic_vector (31 downto 0));
end fpga;

use work.external_components.all;
architecture rtl of fpga is
  function mkvec(b : in std_ulogic) return std_ulogic_vector is
    variable res : std_ulogic_vector(0 downto 0);
  begin
    res(0):=b;
    return(res);
  end;

  component fpga_firstx_RAM is
    port (signal rst : in std_ulogic;
      signal clk : in std_ulogic;
      signal we : in std_ulogic;
      signal addr : in std_ulogic_vector (3 downto 0);
      signal addr2 : in std_ulogic_vector (3 downto 0);
      signal din : in std_ulogic_vector (31 downto 0);
      signal dout : out std_ulogic_vector (31 downto 0);
      signal dout2 : out std_ulogic_vector (31 downto 0));
  end component;

  component fpga_firsty_RAM is
    port (signal rst : in std_ulogic;
      signal clk : in std_ulogic;
      signal we : in std_ulogic;
      signal addr : in std_ulogic_vector (3 downto 0);
      signal addr2 : in std_ulogic_vector (3 downto 0);
      signal din : in std_ulogic_vector (31 downto 0);
      signal dout : out std_ulogic_vector (31 downto 0);
      signal dout2 : out std_ulogic_vector (31 downto 0));
  end component;

  component fpga_firstz_RAM is
    port (signal rst : in std_ulogic;
      signal clk : in std_ulogic;
      signal we : in std_ulogic;
      signal addr : in std_ulogic_vector (3 downto 0);
      signal addr2 : in std_ulogic_vector (3 downto 0);
      signal din : in std_ulogic_vector (31 downto 0);
      signal dout : out std_ulogic_vector (31 downto 0);
      signal dout2 : out std_ulogic_vector (31 downto 0));
  end component;

  component fpga_secondx_RAM is
    port (signal rst : in std_ulogic;
      signal clk : in std_ulogic;
      signal we : in std_ulogic;
      signal addr : in std_ulogic_vector (3 downto 0);
      signal addr2 : in std_ulogic_vector (3 downto 0);
      signal din : in std_ulogic_vector (31 downto 0);
      signal dout : out std_ulogic_vector (31 downto 0);
      signal dout2 : out std_ulogic_vector (31 downto 0));
  end component;

  component fpga_secondy_RAM is
    port (signal rst : in std_ulogic;
      signal clk : in std_ulogic;
      signal we : in std_ulogic;
      signal addr : in std_ulogic_vector (3 downto 0);
      signal addr2 : in std_ulogic_vector (3 downto 0);
      signal din : in std_ulogic_vector (31 downto 0);
      signal dout : out std_ulogic_vector (31 downto 0);
      signal dout2 : out std_ulogic_vector (31 downto 0));
  end component;

  component fpga_secondz_RAM is
    port (signal rst : in std_ulogic;
      signal clk : in std_ulogic;
      signal we : in std_ulogic;
      signal addr : in std_ulogic_vector (3 downto 0);
      signal addr2 : in std_ulogic_vector (3 downto 0);
      signal din : in std_ulogic_vector (31 downto 0);
      signal dout : out std_ulogic_vector (31 downto 0);
      signal dout2 : out std_ulogic_vector (31 downto 0));
  end component;

  type stateType is (init, b0s0, b1s0, b1s1, b1s2, b1s3, b2s0, b3s0, b3s1, b3s2, b3s3, b4s0, b5s0, b6s0, b6s1, b6s2, b7s0, finished);
  type pipeStateType is (idle, init, run, flush);
  type t_b5_0 is record
     f_k0 : std_ulogic_vector (31 downto 0);
  end record;
  type t_b5_1 is record
     f_r_e_g_0 : std_ulogic_vector (31 downto 0);
     f_r_e_g_1 : std_ulogic_vector (31 downto 0);
     f_r_e_g_2 : std_ulogic_vector (31 downto 0);
     f_r_e_g_3 : std_ulogic_vector (31 downto 0);
     f_r_e_g_4 : std_ulogic_vector (31 downto 0);
     f_r_e_g_5 : std_ulogic_vector (31 downto 0);
  end record;
  type t_b5_2 is record
     f_r_e_g_0 : std_ulogic_vector (31 downto 0);
     f_r_e_g_1 : std_ulogic_vector (31 downto 0);
     f_r_e_g_2 : std_ulogic_vector (31 downto 0);
     f_r_e_g_3 : std_ulogic_vector (31 downto 0);
     f_r_e_g_4 : std_ulogic_vector (31 downto 0);
     f_r_e_g_5 : std_ulogic_vector (31 downto 0);
     f_r_e_g_6 : std_ulogic_vector (31 downto 0);
  end record;
  type t_b5_3 is record
     f_r_e_g_0 : std_ulogic_vector (31 downto 0);
     f_r_e_g_1 : std_ulogic_vector (31 downto 0);
     f_r_e_g_2 : std_ulogic_vector (31 downto 0);
     f_r_e_g_3 : std_ulogic_vector (31 downto 0);
     f_r_e_g_4 : std_ulogic_vector (31 downto 0);
     f_r_e_g_5 : std_ulogic_vector (31 downto 0);
     f_r_e_g_6 : std_ulogic_vector (31 downto 0);
  end record;
  type t_b5_4 is record
     f_sumatoria : std_ulogic_vector (31 downto 0);
  end record;
  signal thisState : stateType;
  signal nextState : stateType;
  signal stateEn : std_ulogic;
  signal newState : std_ulogic;
  signal r_input : std_ulogic_vector (31 downto 0);
  signal r_k0 : std_ulogic_vector (31 downto 0);
  signal ni4664001_k0 : std_ulogic_vector (31 downto 0);
  signal r_dato_entrada : std_ulogic_vector (31 downto 0);
  signal ni355_dato_entrada : std_ulogic_vector (31 downto 0);
  signal ni356_dato_entrada : std_ulogic_vector (31 downto 0);
  signal ni357_dato_entrada : std_ulogic_vector (31 downto 0);
  signal ni361_dato_entrada : std_ulogic_vector (31 downto 0);
  signal ni362_dato_entrada : std_ulogic_vector (31 downto 0);
  signal ni363_dato_entrada : std_ulogic_vector (31 downto 0);
  signal r_firstx : std_ulogic_vector (31 downto 0);
  signal ni111_firstx : std_ulogic_vector (31 downto 0);
  signal ni205_firstx : std_ulogic_vector (31 downto 0);
  signal ni214_firstx : std_ulogic_vector (31 downto 0);
  signal p_firstx_we : std_ulogic;
  signal p_firstx_din : std_ulogic_vector (31 downto 0);
  signal p_firstx_dout : std_ulogic_vector (31 downto 0);
  signal p_firstx_addr : std_ulogic_vector (3 downto 0);
  signal p_firstx_addr2 : std_ulogic_vector (3 downto 0);
  signal p_firstx_dout2 : std_ulogic_vector (31 downto 0);
  signal p_firstx_imm : std_ulogic_vector (31 downto 0);
  signal p_firstx_re : std_ulogic;
  signal r2_firstx : std_ulogic_vector (31 downto 0);
  signal p_firstx_imm2 : std_ulogic_vector (31 downto 0);
  signal p_firstx_re2 : std_ulogic;
  signal r_firsty : std_ulogic_vector (31 downto 0);
  signal ni122_firsty : std_ulogic_vector (31 downto 0);
  signal ni227_firsty : std_ulogic_vector (31 downto 0);
  signal ni236_firsty : std_ulogic_vector (31 downto 0);
  signal p_firsty_we : std_ulogic;
  signal p_firsty_din : std_ulogic_vector (31 downto 0);
  signal p_firsty_dout : std_ulogic_vector (31 downto 0);
  signal p_firsty_addr : std_ulogic_vector (3 downto 0);
  signal p_firsty_addr2 : std_ulogic_vector (3 downto 0);
  signal p_firsty_dout2 : std_ulogic_vector (31 downto 0);
  signal p_firsty_imm : std_ulogic_vector (31 downto 0);
  signal p_firsty_re : std_ulogic;
  signal r2_firsty : std_ulogic_vector (31 downto 0);
  signal p_firsty_imm2 : std_ulogic_vector (31 downto 0);
  signal p_firsty_re2 : std_ulogic;
  signal r_firstz : std_ulogic_vector (31 downto 0);
  signal ni133_firstz : std_ulogic_vector (31 downto 0);
  signal ni248_firstz : std_ulogic_vector (31 downto 0);
  signal ni257_firstz : std_ulogic_vector (31 downto 0);
  signal p_firstz_we : std_ulogic;
  signal p_firstz_din : std_ulogic_vector (31 downto 0);
  signal p_firstz_dout : std_ulogic_vector (31 downto 0);
  signal p_firstz_addr : std_ulogic_vector (3 downto 0);
  signal p_firstz_addr2 : std_ulogic_vector (3 downto 0);
  signal p_firstz_dout2 : std_ulogic_vector (31 downto 0);
  signal p_firstz_imm : std_ulogic_vector (31 downto 0);
  signal p_firstz_re : std_ulogic;
  signal r2_firstz : std_ulogic_vector (31 downto 0);
  signal p_firstz_imm2 : std_ulogic_vector (31 downto 0);
  signal p_firstz_re2 : std_ulogic;
  signal r_secondx : std_ulogic_vector (31 downto 0);
  signal ni156_secondx : std_ulogic_vector (31 downto 0);
  signal ni209_secondx : std_ulogic_vector (31 downto 0);
  signal ni218_secondx : std_ulogic_vector (31 downto 0);
  signal p_secondx_we : std_ulogic;
  signal p_secondx_din : std_ulogic_vector (31 downto 0);
  signal p_secondx_dout : std_ulogic_vector (31 downto 0);
  signal p_secondx_addr : std_ulogic_vector (3 downto 0);
  signal p_secondx_addr2 : std_ulogic_vector (3 downto 0);
  signal p_secondx_dout2 : std_ulogic_vector (31 downto 0);
  signal p_secondx_imm : std_ulogic_vector (31 downto 0);
  signal p_secondx_re : std_ulogic;
  signal r2_secondx : std_ulogic_vector (31 downto 0);
  signal p_secondx_imm2 : std_ulogic_vector (31 downto 0);
  signal p_secondx_re2 : std_ulogic;
  signal r_secondy : std_ulogic_vector (31 downto 0);
  signal ni167_secondy : std_ulogic_vector (31 downto 0);
  signal ni231_secondy : std_ulogic_vector (31 downto 0);
  signal ni240_secondy : std_ulogic_vector (31 downto 0);
  signal p_secondy_we : std_ulogic;
  signal p_secondy_din : std_ulogic_vector (31 downto 0);
  signal p_secondy_dout : std_ulogic_vector (31 downto 0);
  signal p_secondy_addr : std_ulogic_vector (3 downto 0);
  signal p_secondy_addr2 : std_ulogic_vector (3 downto 0);
  signal p_secondy_dout2 : std_ulogic_vector (31 downto 0);
  signal p_secondy_imm : std_ulogic_vector (31 downto 0);
  signal p_secondy_re : std_ulogic;
  signal r2_secondy : std_ulogic_vector (31 downto 0);
  signal p_secondy_imm2 : std_ulogic_vector (31 downto 0);
  signal p_secondy_re2 : std_ulogic;
  signal r_secondz : std_ulogic_vector (31 downto 0);
  signal ni178_secondz : std_ulogic_vector (31 downto 0);
  signal ni252_secondz : std_ulogic_vector (31 downto 0);
  signal ni261_secondz : std_ulogic_vector (31 downto 0);
  signal p_secondz_we : std_ulogic;
  signal p_secondz_din : std_ulogic_vector (31 downto 0);
  signal p_secondz_dout : std_ulogic_vector (31 downto 0);
  signal p_secondz_addr : std_ulogic_vector (3 downto 0);
  signal p_secondz_addr2 : std_ulogic_vector (3 downto 0);
  signal p_secondz_dout2 : std_ulogic_vector (31 downto 0);
  signal p_secondz_imm : std_ulogic_vector (31 downto 0);
  signal p_secondz_re : std_ulogic;
  signal r2_secondz : std_ulogic_vector (31 downto 0);
  signal p_secondz_imm2 : std_ulogic_vector (31 downto 0);
  signal p_secondz_re2 : std_ulogic;
  signal r_dato_salida : std_ulogic_vector (31 downto 0);
  signal ni370_dato_salida : std_ulogic_vector (31 downto 0);
  signal r_sumatoria : std_ulogic_vector (31 downto 0);
  signal ni365_sumatoria : std_ulogic_vector (31 downto 0);
  signal ni368_sumatoria : std_ulogic_vector (31 downto 0);
  signal r_i : std_ulogic_vector (31 downto 0);
  signal ni353_i : std_ulogic_vector (31 downto 0);
  signal ni358_i : std_ulogic_vector (31 downto 0);
  signal ni359_i : std_ulogic_vector (31 downto 0);
  signal ni364_i : std_ulogic_vector (31 downto 0);
  signal r_k : std_ulogic_vector (31 downto 0);
  signal ni366_k : std_ulogic_vector (31 downto 0);
  signal ni369_k : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp : std_ulogic_vector (31 downto 0);
  signal ni354_suif_tmp : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp0 : std_ulogic_vector (31 downto 0);
  signal ni360_suif_tmp0 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp1 : std_ulogic_vector (31 downto 0);
  signal ni367_suif_tmp1 : std_ulogic_vector (31 downto 0);
  signal r_r_e_g_0 : std_ulogic_vector (31 downto 0);
  signal ni203_r_e_g_0 : std_ulogic_vector (31 downto 0);
  signal ni223_r_e_g_0 : std_ulogic_vector (31 downto 0);
  signal r_r_e_g_1 : std_ulogic_vector (31 downto 0);
  signal ni212_r_e_g_1 : std_ulogic_vector (31 downto 0);
  signal ni244_r_e_g_1 : std_ulogic_vector (31 downto 0);
  signal r_r_e_g_2 : std_ulogic_vector (31 downto 0);
  signal ni225_r_e_g_2 : std_ulogic_vector (31 downto 0);
  signal ni200_r_e_g_2 : std_ulogic_vector (31 downto 0);
  signal r_r_e_g_3 : std_ulogic_vector (31 downto 0);
  signal ni234_r_e_g_3 : std_ulogic_vector (31 downto 0);
  signal r_r_e_g_4 : std_ulogic_vector (31 downto 0);
  signal ni246_r_e_g_4 : std_ulogic_vector (31 downto 0);
  signal r_r_e_g_5 : std_ulogic_vector (31 downto 0);
  signal ni255_r_e_g_5 : std_ulogic_vector (31 downto 0);
  signal r_r_e_g_6 : std_ulogic_vector (31 downto 0);
  signal ni201_r_e_g_6 : std_ulogic_vector (31 downto 0);
  signal ti273_ack : std_ulogic;
  signal ti273_req : std_ulogic;
  signal t_11 : std_ulogic_vector (31 downto 0);
  signal t_10 : std_ulogic_vector (31 downto 0);
  signal t_9 : std_ulogic_vector (31 downto 0);
  signal ti245_pipeen : std_ulogic;
  signal t_8 : std_ulogic_vector (63 downto 0);
  signal ti224_pipeen : std_ulogic;
  signal t_7 : std_ulogic_vector (63 downto 0);
  signal ti202_pipeen : std_ulogic;
  signal t_6 : std_ulogic_vector (63 downto 0);
  signal ti261_secondz : std_ulogic_vector (3 downto 0);
  signal ti257_firstz : std_ulogic_vector (3 downto 0);
  signal ti252_secondz : std_ulogic_vector (3 downto 0);
  signal ti248_firstz : std_ulogic_vector (3 downto 0);
  signal ti240_secondy : std_ulogic_vector (3 downto 0);
  signal ti236_firsty : std_ulogic_vector (3 downto 0);
  signal ti231_secondy : std_ulogic_vector (3 downto 0);
  signal ti227_firsty : std_ulogic_vector (3 downto 0);
  signal ti218_secondx : std_ulogic_vector (3 downto 0);
  signal ti214_firstx : std_ulogic_vector (3 downto 0);
  signal ti209_secondx : std_ulogic_vector (3 downto 0);
  signal ti205_firstx : std_ulogic_vector (3 downto 0);
  signal t_5 : std_ulogic_vector (3 downto 0);
  signal t_4 : std_ulogic_vector (3 downto 0);
  signal t_3 : std_ulogic_vector (3 downto 0);
  signal t_2 : std_ulogic_vector (3 downto 0);
  signal t_1 : std_ulogic_vector (3 downto 0);
  signal t_0 : std_ulogic_vector (3 downto 0);
  signal s_b5_state : pipeStateType;
  signal s_b5_0 : t_b5_0;
  signal s_b5_1 : t_b5_1;
  signal s_b5_2 : t_b5_2;
  signal s_b5_3 : t_b5_3;
  signal s_b5_4 : t_b5_4;
  signal s_b5_stall : std_ulogic;
  signal s_b5_break : std_ulogic;
  signal s_b5_final : std_ulogic;
  signal s_b5_flushing : std_ulogic;
  signal s_b5_flushed : std_ulogic;
  signal s_b5_done : std_ulogic;
  signal s_b5_vstall : std_ulogic_vector (4 downto 0);
  signal s_b5_vbreak : std_ulogic_vector (4 downto 0);
  signal s_b5_stage : std_ulogic_vector (4 downto 0);
  signal s_b5_vwrite : std_ulogic_vector (4 downto 0);
  signal s_b5_vcont : std_ulogic_vector (4 downto 0);
begin
  process (clk,reset)
  begin
    if (reset='1') then
     thisState <= init;
    elsif (clk'event and clk='1') then
      if (stateEn = '1') then
        thisState <= nextState;
      end if;
    end if;
  end process;

  stateEn <= 
    '0' when thisState = b1s0 and p_input_rdy = '0' else
    '0' when thisState = b1s1 and p_input_rdy = '0' else
    '0' when thisState = b1s2 and p_input_rdy = '0' else
    '0' when thisState = b3s0 and p_input_rdy = '0' else
    '0' when thisState = b3s1 and p_input_rdy = '0' else
    '0' when thisState = b3s2 and p_input_rdy = '0' else
    '0' when thisState = b5s0 and s_b5_done = '0' else
    '0' when thisState = b6s1 and ((p_output_rdy and p_input_eos) and ti273_ack) = '0' else
    '0' when thisState = b6s2 and p_output_rdy = '0' else
    '1';

  process (ni360_suif_tmp0,ni354_suif_tmp,thisState)
  begin
    case thisState is
    when init =>
      nextState <= b0s0;
    when b0s0 =>
      nextState <= b1s0;
    when b1s0 =>
      nextState <= b1s1;
    when b1s1 =>
      nextState <= b1s2;
    when b1s2 =>
      nextState <= b1s3;
    when b1s3 =>
      if (ni354_suif_tmp(0) = '1') then
        nextState <= b1s0;
      elsif ((not ni354_suif_tmp(0)) = '1') then
        nextState <= b2s0;
      else
        nextState <= b1s3;
      end if;
    when b2s0 =>
      nextState <= b3s0;
    when b3s0 =>
      nextState <= b3s1;
    when b3s1 =>
      nextState <= b3s2;
    when b3s2 =>
      nextState <= b3s3;
    when b3s3 =>
      if (ni360_suif_tmp0(0) = '1') then
        nextState <= b3s0;
      elsif ((not ni360_suif_tmp0(0)) = '1') then
        nextState <= b4s0;
      else
        nextState <= b3s3;
      end if;
    when b4s0 =>
      nextState <= b5s0;
    when b5s0 =>
      nextState <= b6s0;
    when b6s0 =>
      nextState <= b6s1;
    when b6s1 =>
      nextState <= b6s2;
    when b6s2 =>
      nextState <= b0s0;
    when b7s0 =>
      nextState <= finished;
    when finished =>
      nextState <= finished;
    when others =>
      nextState <= init;
    end case;
  end process;

  process (clk,reset)
  begin
    if (reset='1') then
     newState <= '1';
    elsif (clk'event and clk='1') then
      case thisState is
      when b5s0 =>
       newState <= not s_b5_stall;
      when  others =>
       newState <= stateEn;
      end case;
    end if;
  end process;

-- b0s0
  ni353_i <= X"00000000";

-- b1s0

-- b1s1
  ni355_dato_entrada <= r_input;
  ni111_firstx <= ni355_dato_entrada;
  t_0 <= r_i(3 downto 0);

-- b1s2
  ni356_dato_entrada <= r_input;
  ni122_firsty <= ni356_dato_entrada;
  t_1 <= r_i(3 downto 0);

-- b1s3
  ni357_dato_entrada <= r_input;
  ni133_firstz <= ni357_dato_entrada;
  t_2 <= r_i(3 downto 0);
  ni358_i <= add(r_i, X"00000001");
  ni354_suif_tmp <= "0000000000000000000000000000000" & cmp_less_s(ni358_i, X"0000000f");

-- b2s0
  ni359_i <= X"00000000";

-- b3s0

-- b3s1
  ni361_dato_entrada <= r_input;
  ni156_secondx <= ni361_dato_entrada;
  t_3 <= r_i(3 downto 0);

-- b3s2
  ni362_dato_entrada <= r_input;
  ni167_secondy <= ni362_dato_entrada;
  t_4 <= r_i(3 downto 0);

-- b3s3
  ni363_dato_entrada <= r_input;
  ni178_secondz <= ni363_dato_entrada;
  t_5 <= r_i(3 downto 0);
  ni364_i <= add(r_i, X"00000001");
  ni360_suif_tmp0 <= "0000000000000000000000000000000" & cmp_less_s(ni364_i, X"0000000f");

-- b4s0
  ni365_sumatoria <= X"00000000";
  ni366_k <= X"00000000";

  process (clk,reset)
  begin
    if (reset='1') then
     s_b5_state <= idle;
    elsif (clk'event and clk='1') then
      case s_b5_state is
      when idle =>
        if (stateEn = '1' and nextState = b5s0) then
          s_b5_state <= init;
        else
          s_b5_state <= idle;
        end if;
      when init =>
        s_b5_state <= run;
      when run =>
        if (s_b5_break = '1') then
          s_b5_state <= flush;
        else
          s_b5_state <= run;
        end if;
      when flush =>
        if (s_b5_flushed = '1') then
          s_b5_state <= idle;
        else
          s_b5_state <= flush;
        end if;
      when others => null;
      end case;
    end if;
  end process;

-- b5 stage 0
  s_b5_vstall(0) <= '0';
  ni4664001_k0 <= r_k;
  ni369_k <= add(r_k, X"00000001");
  ni367_suif_tmp1 <= "0000000000000000000000000000000" & cmp_less_u(ni4664001_k0, X"0000000f");
  s_b5_vbreak(0) <= 
    '1' when (not ni367_suif_tmp1(0)) = '1' else
    '0';
  process (clk)
  begin
    if (clk'event and clk='1') then
      if (s_b5_vwrite(0) = '1') then
        s_b5_0.f_k0 <= ni4664001_k0;
      end if;
    end if;
  end process;

-- b5 stage 1
  s_b5_vstall(1) <= '0';
  ti205_firstx <= s_b5_0.f_k0(3 downto 0);
  ni205_firstx <= p_firstx_imm2;
  ti209_secondx <= s_b5_0.f_k0(3 downto 0);
  ni209_secondx <= p_secondx_imm2;
  ti214_firstx <= s_b5_0.f_k0(3 downto 0);
  ni214_firstx <= p_firstx_imm;
  ti218_secondx <= s_b5_0.f_k0(3 downto 0);
  ni218_secondx <= p_secondx_imm;
  ti227_firsty <= s_b5_0.f_k0(3 downto 0);
  ni227_firsty <= p_firsty_imm2;
  ti231_secondy <= s_b5_0.f_k0(3 downto 0);
  ni231_secondy <= p_secondy_imm2;
  ti236_firsty <= s_b5_0.f_k0(3 downto 0);
  ni236_firsty <= p_firsty_imm;
  ti240_secondy <= s_b5_0.f_k0(3 downto 0);
  ni240_secondy <= p_secondy_imm;
  ti248_firstz <= s_b5_0.f_k0(3 downto 0);
  ni248_firstz <= p_firstz_imm2;
  ti252_secondz <= s_b5_0.f_k0(3 downto 0);
  ni252_secondz <= p_secondz_imm2;
  ti257_firstz <= s_b5_0.f_k0(3 downto 0);
  ni257_firstz <= p_firstz_imm;
  ti261_secondz <= s_b5_0.f_k0(3 downto 0);
  ni261_secondz <= p_secondz_imm;
  ni203_r_e_g_0 <= sub(ni205_firstx, ni209_secondx);
  ni212_r_e_g_1 <= sub(ni214_firstx, ni218_secondx);
  ni225_r_e_g_2 <= sub(ni227_firsty, ni231_secondy);
  ni234_r_e_g_3 <= sub(ni236_firsty, ni240_secondy);
  ni246_r_e_g_4 <= sub(ni248_firstz, ni252_secondz);
  ni255_r_e_g_5 <= sub(ni257_firstz, ni261_secondz);
  s_b5_vbreak(1) <= '0';
  process (clk)
  begin
    if (clk'event and clk='1') then
      if (s_b5_vwrite(1) = '1') then
        s_b5_1.f_r_e_g_5 <= ni255_r_e_g_5;
        s_b5_1.f_r_e_g_4 <= ni246_r_e_g_4;
        s_b5_1.f_r_e_g_3 <= ni234_r_e_g_3;
        s_b5_1.f_r_e_g_2 <= ni225_r_e_g_2;
        s_b5_1.f_r_e_g_1 <= ni212_r_e_g_1;
        s_b5_1.f_r_e_g_0 <= ni203_r_e_g_0;
      end if;
    end if;
  end process;

-- b5 stage 2
  s_b5_vstall(2) <= '0';
  ni201_r_e_g_6 <= ashr(t_6(31 downto 0), 8);
  mul2_s_0_0_0_1_32_32_0: entity work.mul2_s_0_0_0_1_32_32
    port map (
      reset => reset, 
      clk => clk, 
      ce => ti202_pipeen, 
      a => s_b5_1.f_r_e_g_0, 
      b => s_b5_1.f_r_e_g_1, 
      sum => t_6);

  ni223_r_e_g_0 <= ashr(t_7(31 downto 0), 8);
  mul2_s_0_0_0_1_32_32_1: entity work.mul2_s_0_0_0_1_32_32
    port map (
      reset => reset, 
      clk => clk, 
      ce => ti224_pipeen, 
      a => s_b5_1.f_r_e_g_2, 
      b => s_b5_1.f_r_e_g_3, 
      sum => t_7);

  ni244_r_e_g_1 <= ashr(t_8(31 downto 0), 8);
  mul2_s_0_0_0_1_32_32_2: entity work.mul2_s_0_0_0_1_32_32
    port map (
      reset => reset, 
      clk => clk, 
      ce => ti245_pipeen, 
      a => s_b5_1.f_r_e_g_4, 
      b => s_b5_1.f_r_e_g_5, 
      sum => t_8);

  s_b5_vbreak(2) <= '0';
  process (clk)
  begin
    if (clk'event and clk='1') then
      if (s_b5_vwrite(2) = '1') then
        s_b5_2.f_r_e_g_6 <= ni201_r_e_g_6;
        s_b5_2.f_r_e_g_5 <= s_b5_1.f_r_e_g_5;
        s_b5_2.f_r_e_g_4 <= s_b5_1.f_r_e_g_4;
        s_b5_2.f_r_e_g_3 <= s_b5_1.f_r_e_g_3;
        s_b5_2.f_r_e_g_2 <= s_b5_1.f_r_e_g_2;
        s_b5_2.f_r_e_g_1 <= ni244_r_e_g_1;
        s_b5_2.f_r_e_g_0 <= ni223_r_e_g_0;
      end if;
    end if;
  end process;

-- b5 stage 3
  s_b5_vstall(3) <= '0';
  ni200_r_e_g_2 <= add(s_b5_2.f_r_e_g_6, add(s_b5_2.f_r_e_g_0, s_b5_2.f_r_e_g_1));
  s_b5_vbreak(3) <= '0';
  process (clk)
  begin
    if (clk'event and clk='1') then
      if (s_b5_vwrite(3) = '1') then
        s_b5_3.f_r_e_g_6 <= s_b5_2.f_r_e_g_6;
        s_b5_3.f_r_e_g_5 <= s_b5_2.f_r_e_g_5;
        s_b5_3.f_r_e_g_4 <= s_b5_2.f_r_e_g_4;
        s_b5_3.f_r_e_g_3 <= s_b5_2.f_r_e_g_3;
        s_b5_3.f_r_e_g_2 <= ni200_r_e_g_2;
        s_b5_3.f_r_e_g_1 <= s_b5_2.f_r_e_g_1;
        s_b5_3.f_r_e_g_0 <= s_b5_2.f_r_e_g_0;
      end if;
    end if;
  end process;

-- b5 stage 4
  s_b5_vstall(4) <= '0';
  ni368_sumatoria <= add(s_b5_4.f_sumatoria, s_b5_3.f_r_e_g_2);
  s_b5_vbreak(4) <= '0';
  process (clk)
  begin
    if (clk'event and clk='1') then
      if (s_b5_state = init) then
        s_b5_4.f_sumatoria <= r_sumatoria;
      elsif (s_b5_vwrite(4) = '1') then
        s_b5_4.f_sumatoria <= ni368_sumatoria;
      end if;
    end if;
  end process;

  with s_b5_state select
    s_b5_break <= 
      s_b5_vbreak(0) and s_b5_stage(0) when run,
      '1' when flush,
      '0' when others;
  process (clk,reset)
  begin
    if (reset='1') then
     s_b5_stage <= "00000";
    elsif (clk'event and clk='1') then
      if (s_b5_state = idle) then
       s_b5_stage <= "00000";
      elsif (thisState = b5s0 and s_b5_stall = '0') then
       s_b5_stage <= s_b5_vcont(3 downto 0) & (not s_b5_break and not s_b5_flushing);
      end if;    end if;
  end process;

  s_b5_stall <= 
    '0' when (s_b5_vstall and s_b5_stage) = "00000" else
    '1';
  s_b5_vwrite(0) <= 
    s_b5_stage(0) when s_b5_stall = '0' and s_b5_final = '0' else
    '0';
  s_b5_vwrite(1) <= 
    s_b5_stage(1) when s_b5_stall = '0' and s_b5_final = '0' else
    '0';
  s_b5_vwrite(2) <= 
    s_b5_stage(2) when s_b5_stall = '0' and s_b5_final = '0' else
    '0';
  s_b5_vwrite(3) <= 
    s_b5_stage(3) when s_b5_stall = '0' and s_b5_final = '0' else
    '0';
  s_b5_vwrite(4) <= 
    s_b5_stage(4) when s_b5_stall = '0' else
    '0';
  s_b5_vcont(0) <= (s_b5_stage(0) and not s_b5_vbreak(0)) and not s_b5_final;
  s_b5_vcont(1) <= s_b5_stage(1) and not s_b5_final;
  s_b5_vcont(2) <= s_b5_stage(2) and not s_b5_final;
  s_b5_vcont(3) <= s_b5_stage(3) and not s_b5_final;
  s_b5_vcont(4) <= '0';
  s_b5_final <= '0';
  s_b5_flushing <= 
    '1' when s_b5_state = flush else
    s_b5_final;
  s_b5_flushed <= 
    '1' when s_b5_stall = '0' and s_b5_vcont = "00000" else
    '0';
  with s_b5_state select
    s_b5_done <= 
      '0' when init,
      '0' when run,
      s_b5_flushed when flush,
      '0' when others;
-- b6s0
  t_10 <= shl(r_sumatoria, 8);
  t_11 <= X"00000f00";
  divmod_u_3: divmod_u
    generic map (
        WIDTH => 32)
      port map (
        reset => reset, 
        clk => clk, 
        go => ti273_req, 
        n => t_10, 
        d => t_11, 
        q => t_9, 
        done => ti273_ack);


-- b6s1
    ni370_dato_salida <= t_9;

-- b6s2

-- b7s0

-- 


    process (clk)
    begin
      if (clk'event and clk='1') then
        case thisState is
        when b0s0 =>
          if (stateEn = '1') then
            r_i <= ni353_i;
          end if;
        when b1s3 =>
          if (stateEn = '1') then
            r_i <= ni358_i;
          end if;
        when b2s0 =>
          if (stateEn = '1') then
            r_i <= ni359_i;
          end if;
        when b3s3 =>
          if (stateEn = '1') then
            r_i <= ni364_i;
          end if;
        when others =>
        end case;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        case thisState is
        when b1s1 =>
          if (stateEn = '1') then
            r_dato_entrada <= ni355_dato_entrada;
          end if;
        when b1s2 =>
          if (stateEn = '1') then
            r_dato_entrada <= ni356_dato_entrada;
          end if;
        when b1s3 =>
          if (stateEn = '1') then
            r_dato_entrada <= ni357_dato_entrada;
          end if;
        when b3s1 =>
          if (stateEn = '1') then
            r_dato_entrada <= ni361_dato_entrada;
          end if;
        when b3s2 =>
          if (stateEn = '1') then
            r_dato_entrada <= ni362_dato_entrada;
          end if;
        when b3s3 =>
          if (stateEn = '1') then
            r_dato_entrada <= ni363_dato_entrada;
          end if;
        when others =>
        end case;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        case thisState is
        when b1s3 =>
          if (stateEn = '1') then
            r_suif_tmp <= ni354_suif_tmp;
          end if;
        when others =>
        end case;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        case thisState is
        when b3s3 =>
          if (stateEn = '1') then
            r_suif_tmp0 <= ni360_suif_tmp0;
          end if;
        when others =>
        end case;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        case thisState is
        when b4s0 =>
          if (stateEn = '1') then
            r_sumatoria <= ni365_sumatoria;
          end if;
        when b5s0 =>
          if (s_b5_vbreak(0) = '1') then
            r_sumatoria <= s_b5_4.f_sumatoria;
          end if;
          if (s_b5_vwrite(4) = '1') then
            r_sumatoria <= ni368_sumatoria;
          end if;
        when others =>
        end case;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        case thisState is
        when b4s0 =>
          if (stateEn = '1') then
            r_k <= ni366_k;
          end if;
        when b5s0 =>
          if (s_b5_vwrite(0) = '1') then
            r_k <= ni369_k;
          end if;
        when others =>
        end case;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        case thisState is
        when b6s1 =>
          if (stateEn = '1') then
            r_dato_salida <= ni370_dato_salida;
          end if;
        when others =>
        end case;
      end if;
    end process;

-- "input" interface signals
    process (clk)
    begin
      if (clk'event and clk='1') then
        if ((p_input_en and p_input_rdy) = '1') then
          r_input <= p_input_data;
        end if;
      end if;
    end process;

    p_input_en <= 
      stateEn and not p_input_eos when thisState = b1s0 else
      stateEn and not p_input_eos when thisState = b1s1 else
      stateEn and not p_input_eos when thisState = b1s2 else
      stateEn and not p_input_eos when thisState = b3s0 else
      stateEn and not p_input_eos when thisState = b3s1 else
      stateEn and not p_input_eos when thisState = b3s2 else
      stateEn or not p_input_eos when thisState = b6s1 else
      '0';

-- "output" interface signals
    p_output_en <= 
      stateEn when thisState = b6s1 else
      stateEn when thisState = b6s2 else
      '0';
    p_output_data <= ni370_dato_salida;
    p_output_eos <= 
      '1' when thisState = b6s2 else
      '0';

-- "firstx" memory signals
    ram_4: fpga_firstx_RAM
      port map (
        rst => reset, 
        clk => clk, 
        we => p_firstx_we, 
        addr => p_firstx_addr, 
        addr2 => p_firstx_addr2, 
        din => p_firstx_din, 
        dout => p_firstx_dout, 
        dout2 => p_firstx_dout2);

    p_firstx_addr <= 
      r_i(3 downto 0) when thisState = b1s1 else
      ni4664001_k0(3 downto 0) when thisState = b5s0 and s_b5_vwrite(0) = '1' else
      (others => 'X');
    p_firstx_re <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_firstx_re2 <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_firstx_addr2 <= ni4664001_k0(3 downto 0);
    p_firstx_we <= 
      '1' when thisState = b1s1 else
      '0';
    p_firstx_din <= ni355_dato_entrada;
    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_firstx_re = '1') then
          r_firstx <= p_firstx_dout;
        end if;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_firstx_re2 = '1') then
          r2_firstx <= p_firstx_dout2;
        end if;
      end if;
    end process;

    p_firstx_imm <= 
      p_firstx_dout when newState = '1' else
      r_firstx;
    p_firstx_imm2 <= 
      p_firstx_dout2 when newState = '1' else
      r2_firstx;
-- "firsty" memory signals
    ram_5: fpga_firsty_RAM
      port map (
        rst => reset, 
        clk => clk, 
        we => p_firsty_we, 
        addr => p_firsty_addr, 
        addr2 => p_firsty_addr2, 
        din => p_firsty_din, 
        dout => p_firsty_dout, 
        dout2 => p_firsty_dout2);

    p_firsty_addr <= 
      r_i(3 downto 0) when thisState = b1s2 else
      ni4664001_k0(3 downto 0) when thisState = b5s0 and s_b5_vwrite(0) = '1' else
      (others => 'X');
    p_firsty_re <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_firsty_re2 <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_firsty_addr2 <= ni4664001_k0(3 downto 0);
    p_firsty_we <= 
      '1' when thisState = b1s2 else
      '0';
    p_firsty_din <= ni356_dato_entrada;
    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_firsty_re = '1') then
          r_firsty <= p_firsty_dout;
        end if;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_firsty_re2 = '1') then
          r2_firsty <= p_firsty_dout2;
        end if;
      end if;
    end process;

    p_firsty_imm <= 
      p_firsty_dout when newState = '1' else
      r_firsty;
    p_firsty_imm2 <= 
      p_firsty_dout2 when newState = '1' else
      r2_firsty;
-- "firstz" memory signals
    ram_6: fpga_firstz_RAM
      port map (
        rst => reset, 
        clk => clk, 
        we => p_firstz_we, 
        addr => p_firstz_addr, 
        addr2 => p_firstz_addr2, 
        din => p_firstz_din, 
        dout => p_firstz_dout, 
        dout2 => p_firstz_dout2);

    p_firstz_addr <= 
      r_i(3 downto 0) when thisState = b1s3 else
      ni4664001_k0(3 downto 0) when thisState = b5s0 and s_b5_vwrite(0) = '1' else
      (others => 'X');
    p_firstz_re <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_firstz_re2 <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_firstz_addr2 <= ni4664001_k0(3 downto 0);
    p_firstz_we <= 
      '1' when thisState = b1s3 else
      '0';
    p_firstz_din <= ni357_dato_entrada;
    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_firstz_re = '1') then
          r_firstz <= p_firstz_dout;
        end if;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_firstz_re2 = '1') then
          r2_firstz <= p_firstz_dout2;
        end if;
      end if;
    end process;

    p_firstz_imm <= 
      p_firstz_dout when newState = '1' else
      r_firstz;
    p_firstz_imm2 <= 
      p_firstz_dout2 when newState = '1' else
      r2_firstz;
-- "secondx" memory signals
    ram_7: fpga_secondx_RAM
      port map (
        rst => reset, 
        clk => clk, 
        we => p_secondx_we, 
        addr => p_secondx_addr, 
        addr2 => p_secondx_addr2, 
        din => p_secondx_din, 
        dout => p_secondx_dout, 
        dout2 => p_secondx_dout2);

    p_secondx_addr <= 
      r_i(3 downto 0) when thisState = b3s1 else
      ni4664001_k0(3 downto 0) when thisState = b5s0 and s_b5_vwrite(0) = '1' else
      (others => 'X');
    p_secondx_re <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_secondx_re2 <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_secondx_addr2 <= ni4664001_k0(3 downto 0);
    p_secondx_we <= 
      '1' when thisState = b3s1 else
      '0';
    p_secondx_din <= ni361_dato_entrada;
    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_secondx_re = '1') then
          r_secondx <= p_secondx_dout;
        end if;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_secondx_re2 = '1') then
          r2_secondx <= p_secondx_dout2;
        end if;
      end if;
    end process;

    p_secondx_imm <= 
      p_secondx_dout when newState = '1' else
      r_secondx;
    p_secondx_imm2 <= 
      p_secondx_dout2 when newState = '1' else
      r2_secondx;
-- "secondy" memory signals
    ram_8: fpga_secondy_RAM
      port map (
        rst => reset, 
        clk => clk, 
        we => p_secondy_we, 
        addr => p_secondy_addr, 
        addr2 => p_secondy_addr2, 
        din => p_secondy_din, 
        dout => p_secondy_dout, 
        dout2 => p_secondy_dout2);

    p_secondy_addr <= 
      r_i(3 downto 0) when thisState = b3s2 else
      ni4664001_k0(3 downto 0) when thisState = b5s0 and s_b5_vwrite(0) = '1' else
      (others => 'X');
    p_secondy_re <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_secondy_re2 <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_secondy_addr2 <= ni4664001_k0(3 downto 0);
    p_secondy_we <= 
      '1' when thisState = b3s2 else
      '0';
    p_secondy_din <= ni362_dato_entrada;
    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_secondy_re = '1') then
          r_secondy <= p_secondy_dout;
        end if;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_secondy_re2 = '1') then
          r2_secondy <= p_secondy_dout2;
        end if;
      end if;
    end process;

    p_secondy_imm <= 
      p_secondy_dout when newState = '1' else
      r_secondy;
    p_secondy_imm2 <= 
      p_secondy_dout2 when newState = '1' else
      r2_secondy;
-- "secondz" memory signals
    ram_9: fpga_secondz_RAM
      port map (
        rst => reset, 
        clk => clk, 
        we => p_secondz_we, 
        addr => p_secondz_addr, 
        addr2 => p_secondz_addr2, 
        din => p_secondz_din, 
        dout => p_secondz_dout, 
        dout2 => p_secondz_dout2);

    p_secondz_addr <= 
      r_i(3 downto 0) when thisState = b3s3 else
      ni4664001_k0(3 downto 0) when thisState = b5s0 and s_b5_vwrite(0) = '1' else
      (others => 'X');
    p_secondz_re <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_secondz_re2 <= 
      newState when thisState = b5s0 and s_b5_stage(1) = '1' else
      '0';
    p_secondz_addr2 <= ni4664001_k0(3 downto 0);
    p_secondz_we <= 
      '1' when thisState = b3s3 else
      '0';
    p_secondz_din <= ni363_dato_entrada;
    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_secondz_re = '1') then
          r_secondz <= p_secondz_dout;
        end if;
      end if;
    end process;

    process (clk)
    begin
      if (clk'event and clk='1') then
        if (p_secondz_re2 = '1') then
          r2_secondz <= p_secondz_dout2;
        end if;
      end if;
    end process;

    p_secondz_imm <= 
      p_secondz_dout when newState = '1' else
      r_secondz;
    p_secondz_imm2 <= 
      p_secondz_dout2 when newState = '1' else
      r2_secondz;
    ti202_pipeen <= 
      not s_b5_stall when thisState = b5s0 else
      '0';
    ti224_pipeen <= 
      not s_b5_stall when thisState = b5s0 else
      '0';
    ti245_pipeen <= 
      not s_b5_stall when thisState = b5s0 else
      '0';
    ti273_req <= 
      '1' when thisState = b6s0 and stateEn = '1' else
      '0';
end rtl;
